generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AccessLevel {
  User
  Staff
  DistributionCenter
  Admin
}

model User {
  id          String      @id @default(uuid())
  name        String
  lastName    String
  login       String      @unique
  password    String
  phone       String      @unique
  accessLevel AccessLevel @default(value: User)
  createdAt   DateTime    @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt   DateTime?   @updatedAt @map("updated_at") @db.Timestamptz()

  sessions        Session[]
  shelterManagers ShelterManagers[]

  @@map("users")
}

model Session {
  id        String    @id @default(uuid())
  userId    String    @map("user_id")
  ip        String?
  userAgent String?   @map("user_agent")
  active    Boolean   @default(value: true)
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamptz()

  user User @relation(fields: [userId], references: [id])

  @@map("sessions")
}

model SupplyCategory {
  id        String    @id @default(uuid())
  name      String    @unique
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamptz()

  supplies Supply[]

  @@map("category_supplies")
}

model ShelterSupply {
  shelterId String    @map("shelter_id")
  supplyId  String    @map("supply_id")
  priority  Int       @default(value: 0)
  quantity  Int?
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamptz()

  shelter Shelter @relation(fields: [shelterId], references: [id])
  supply  Supply  @relation(fields: [supplyId], references: [id])

  @@id([shelterId, supplyId])
  @@map("shelter_supplies")
}

model Supply {
  id               String    @id @default(uuid())
  supplyCategoryId String    @map("supply_category_id")
  name             String
  createdAt        DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt        DateTime? @updatedAt @map("updated_at") @db.Timestamptz()

  supplyCategory  SupplyCategory  @relation(fields: [supplyCategoryId], references: [id])
  shelterSupplies ShelterSupply[]

  @@map("supplies")
}

model Shelter {
  id              String    @id @default(uuid())
  name            String    @unique
  pix             String?   @unique
  address         String
  street          String?
  neighbourhood   String?
  city            String?
  streetNumber    String?  @map("street_number")
  zipCode         String?  @map("zip_code")
  petFriendly     Boolean?  @map("pet_friendly")
  shelteredPeople Int?      @map("sheltered_people")
  capacity        Int?
  contact         String?
  prioritySum     Int       @default(value: 0) @map("priority_sum")
  latitude        Float?
  longitude       Float?
  verified        Boolean   @default(value: false)
  createdAt       DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt       DateTime? @updatedAt @map("updated_at") @db.Timestamptz()

  shelterManagers ShelterManagers[]
  shelterSupplies ShelterSupply[]

  @@map("shelters")
}

model ShelterManagers {
  shelterId String    @map("shelter_id")
  userId    String    @map("user_id")
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamptz()

  user    User    @relation(fields: [userId], references: [id])
  shelter Shelter @relation(fields: [shelterId], references: [id])

  @@id([shelterId, userId])
  @@map("shelter_managers")
}
