generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AccessLevel {
  User
  TransportManager
  Staff
  DistributionCenter
  Admin
}

enum State {
  AC
  AL
  AP
  AM
  BA
  CE
  DF
  ES
  GO
  MA
  MT
  MS
  MG
  PA
  PB
  PR
  PE
  PI
  RJ
  RN
  RS
  RO
  RR
  SC
  SP
  SE
  TO
}

model User {
  id          String      @id @default(uuid())
  name        String
  lastName    String
  login       String      @unique
  password    String
  phone       String      @unique
  accessLevel AccessLevel @default(value: User)
  createdAt   String      @map("created_at") @db.VarChar(32)
  updatedAt   String?     @map("updated_at") @db.VarChar(32)

  sessions          Session[]
  shelterManagers   ShelterManagers[]
  transportManagers TransportManager[]

  @@map("users")
}

model Session {
  id        String  @id @default(uuid())
  userId    String  @map("user_id")
  ip        String?
  userAgent String? @map("user_agent")
  active    Boolean @default(value: true)
  createdAt String  @map("created_at") @db.VarChar(32)
  updatedAt String? @map("updated_at") @db.VarChar(32)

  user User @relation(fields: [userId], references: [id])

  @@map("sessions")
}

model SupplyCategory {
  id        String  @id @default(uuid())
  name      String  @unique
  createdAt String  @map("created_at") @db.VarChar(32)
  updatedAt String? @map("updated_at") @db.VarChar(32)

  supplies Supply[]

  @@map("category_supplies")
}

model ShelterSupply {
  shelterId String  @map("shelter_id")
  supplyId  String  @map("supply_id")
  priority  Int     @default(value: 0)
  quantity  Int?
  createdAt String  @map("created_at") @db.VarChar(32)
  updatedAt String? @map("updated_at") @db.VarChar(32)

  shelter Shelter @relation(fields: [shelterId], references: [id])
  supply  Supply  @relation(fields: [supplyId], references: [id])

  @@id([shelterId, supplyId])
  @@map("shelter_supplies")
}

model Supply {
  id               String  @id @default(uuid())
  supplyCategoryId String  @map("supply_category_id")
  name             String
  createdAt        String  @map("created_at") @db.VarChar(32)
  updatedAt        String? @map("updated_at") @db.VarChar(32)

  supplyCategory  SupplyCategory  @relation(fields: [supplyCategoryId], references: [id])
  shelterSupplies ShelterSupply[]

  @@map("supplies")
}

model Shelter {
  id              String   @id @default(uuid())
  name            String   @unique
  pix             String?  @unique
  address         String
  street          String?
  neighbourhood   String?
  city            String?
  streetNumber    String?  @map("street_number")
  zipCode         String?  @map("zip_code")
  petFriendly     Boolean? @map("pet_friendly")
  shelteredPeople Int?     @map("sheltered_people")
  capacity        Int?
  contact         String?
  prioritySum     Int      @default(value: 0) @map("priority_sum")
  latitude        Float?
  longitude       Float?
  verified        Boolean  @default(value: false)
  createdAt       String   @map("created_at") @db.VarChar(32)
  updatedAt       String?  @map("updated_at") @db.VarChar(32)

  shelterManagers ShelterManagers[]
  shelterSupplies ShelterSupply[]
  trips           Trip[]

  @@map("shelters")
}

model ShelterManagers {
  shelterId String  @map("shelter_id")
  userId    String  @map("user_id")
  createdAt String  @map("created_at") @db.VarChar(32)
  updatedAt String? @map("updated_at") @db.VarChar(32)

  user    User    @relation(fields: [userId], references: [id])
  shelter Shelter @relation(fields: [shelterId], references: [id])

  @@id([shelterId, userId])
  @@map("shelter_managers")
}

model Transport {
  id                        String  @id @default(uuid())
  vehicleType               String  @map("vehicle_type")
  vehicleRegistrationPlate  String? @map("vehicle_registration_plate")
  contact                   String?
  createdAt                 String  @map("created_at") @db.VarChar(32)
  updatedAt                 String? @map("updated_at") @db.VarChar(32)

  transportManagers TransportManager[]
  trips Trip[]

  @@map("transports")
}

model TransportManager {
  transportId   String  @map("transport_id")
  userId        String  @map("user_id")
  createdAt     String  @map("created_at") @db.VarChar(32)
  updatedAt     String? @map("updated_at") @db.VarChar(32)

  transport   Transport   @relation(fields: [transportId], references: [id])
  user        User        @relation(fields: [userId], references: [id])

  @@id([transportId, userId])
  @@map("transport_managers")
}

model Trip {
  id                    String    @id @default(uuid())
  transportId           String    @map("transport_id")
  shelterId             String    @map("shelter_id")
  departureNeighborhood String?   @map("departure_neighborhood")
  departureCity         String    @map("departure_city")
  departureState        State     @map("departure_state")
  departureDatetime     DateTime  @map("departure_datetime")
  contact               String
  canceled              Boolean   @default(value: false)
  createdAt             String    @map("created_at") @db.VarChar(32)
  updatedAt             String?   @map("updated_at") @db.VarChar(32)

  transport   Transport   @relation(fields: [transportId], references: [id])
  shelter     Shelter     @relation(fields: [shelterId], references: [id])

  @@map("trips")
}