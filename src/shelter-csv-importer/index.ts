import {
  GoogleGenerativeAI,
  HarmBlockThreshold,
  HarmCategory,
} from '@google/generative-ai';
import { Logger } from '@nestjs/common';
import { Prisma } from '@prisma/client';
import { PrismaClientKnownRequestError } from '@prisma/client/runtime/library';
import { parse as createParser } from 'csv';
import { ReadStream } from 'node:fs';
import * as path from 'node:path';
import { Readable, Transform } from 'node:stream';
import { TransformStream, WritableStream } from 'node:stream/web';

import { PrismaService } from '../prisma/prisma.service';
import { CreateShelterSchema } from '../shelter/types/types';
import { responseToReadable } from '../utils/utils';

type ShelterKey = Exclude<
  Prisma.ShelterScalarFieldEnum,
  'createdAt' | 'updatedAt' | 'prioritySum' | 'verified' | 'id'
>;
type ShelterColumHeader = Record<`${ShelterKey}Field`, string> & {
  shelterSuppliesField: string;
};
interface ParseCsvArgsBaseArgs<T = Record<string, string>> {
  /**
   * link do arquivo CSV
   */
  csvUrl?: string;
  /**
   *  stream proveniente de algum arquivo CSV
   */
  fileStream?: ReadStream;
  /**
   * mapeamento de quais cabe√ßalhos do csv ser√£o usados como colunas da tabela.
   */
  headers?: Partial<T>;
}

export type ParseCsvArgs<T> =
  | (ParseCsvArgsBaseArgs<T> & { csvUrl: string })
  | (ParseCsvArgsBaseArgs<T> & { fileStream: ReadStream });

interface EnhancedTransformArgs {
  /**
   * KeyValue contento as categorias e os supplies contidos naquela categorias (detectados por IA)
   */
  shelterSupliesByCategory: Record<string, string[]>;
  /**
   * KeyValue com Suprimentos j√° encontrados na base atual que podem ser utilizadas em rela√ß√µes
   * @example
   * { "√ìleo de cozinha": "eb1d5056-8b9b-455d-a179-172a747e3f20",
   *   "√Ålcool em gel": "a3e3bdf8-0be4-4bdc-a3b0-b40ba931be5f"
   *  }
   */
  suppliesAvailable: Map<string, string>;
  /**
   * KeyValue com Categorias j√° encontradas na base atual que podem ser utilizadas em rela√ß√µes
   * @example
   * { "Higiene Pessoal": "718d5be3-69c3-4216-97f1-12b690d0eb97",
   *   "Alimentos e √Ågua": "a3e3bdf8-0be4-4bdc-a3b0-b40ba931be5f"
   *  }
   */
  categoriesAvailable: Map<string, string>;
  counter?: AtomicCounter;
}
const CSV_DEFAULT_HEADERS: ShelterColumHeader = {
  nameField: 'nome_do_local',
  addressField: 'endereco',
  contactField: 'whatsapp',
  latitudeField: 'lat',
  longitudeField: 'lng',
  shelterSuppliesField: 'itens_em_falta',
  capacityField: 'capacidade',
  cityField: 'cidade',
  neighbourhoodField: 'bairro',
  petFriendlyField: 'pet_friendly',
  pixField: 'pix',
  shelteredPeopleField: 'pessoas_abrigadas',
  streetField: 'rua',
  streetNumberField: 'numero',
  zipCodeField: 'cep',
};

type ShelterInput = Partial<Prisma.ShelterCreateInput & { supplies: string[] }>;
/**
 * Padr√£o utilizado
 * `nome_do_local, endereco, whatsapp, lat, lng, itens_disponiveis, itens_em_falta`
 */

// Regex que ignora v√≠rgulas dentro de parenteses no split
const COLON_REGEX = /(?<!\([^)]*),(?![^(]*\))/g;

const logger = new Logger(shelterToCsv.name);

const csvParser = createParser({ columns: true }, function (err, data) {
  if (err) {
    logger.error(err);
    throw err;
  }
  return data;
});

function translatePrismaError(err: PrismaClientKnownRequestError) {
  switch (err.code) {
    case 'P2002':
    case 'P2003':
    case 'P2004': {
      let msg = `PrismaError(${err.code}): Constraint error ocurred`;
      if (err.meta?.modelName && err?.meta.target) {
        msg += ` for `;
        if (Array.isArray(err?.meta.target)) {
          for (const prop of err?.meta.target) {
            msg += `${err.meta?.modelName}."${prop}"`;
          }
        } else {
          msg += `${err.meta.target}`;
        }
      }

      return msg;
    }

    default:
      return err.message;
  }
}

/**
 * JSON -> ShelterInput
 * @see ShelterInput
 */
class CsvToShelterTransformStream extends TransformStream<
  unknown,
  ShelterInput
> {
  /**
   * Espera um Ojeto contento a assinatura da entidade esperada
   * @param columnNames dicion√°rio com nomes das colunas a serem mapeadas
   */
  constructor(columnNames: Partial<ShelterColumHeader> = CSV_DEFAULT_HEADERS) {
    const efffectiveColumnNames = {} as ShelterColumHeader;
    Object.entries(CSV_DEFAULT_HEADERS).forEach(([key, value]) => {
      efffectiveColumnNames[key] =
        typeof columnNames[key] === 'string' ? columnNames[key] : value;
    });

    super({
      async transform(chunk, controller) {
        if (!chunk || (chunk && typeof chunk !== 'object')) {
          return;
        }
        let supplies: string[] = [];

        if (
          typeof chunk[efffectiveColumnNames.shelterSuppliesField] === 'string'
        ) {
          supplies = (<string>chunk[efffectiveColumnNames.shelterSuppliesField])
            .split(COLON_REGEX)
            .filter(Boolean)
            .map((s) => s.trim());
        }

        const shelter: ShelterInput = {
          verified: false,
          // Removendo duplicidades
          supplies: [...new Set(supplies)],
        };

        Object.keys(Prisma.ShelterScalarFieldEnum).forEach((key) => {
          shelter[key] ??= chunk[efffectiveColumnNames[`${key}Field`]];
        });

        controller.enqueue(shelter);
        logger.verbose(
          'üöÄ ~ CsvToShelterTransformStream ~ constructor ~ shelter:',
          shelter,
        );
      },
    });
  }
}

/**
 * Valida o schema do Input, enriquece o modelo e adicionas as rela√ß√µes encontradas
 */
class ShelterEnhancedStreamTransformer extends TransformStream<
  ShelterInput,
  ReturnType<typeof CreateShelterSchema.parse>
> {
  private counter!: AtomicCounter;

  /**
   *
   */
  constructor({
    shelterSupliesByCategory,
    suppliesAvailable,
    categoriesAvailable,
    counter,
  }: EnhancedTransformArgs) {
    super({
      transform: async (shelter: ShelterInput, controller) => {
        this.counter ??= counter || new AtomicCounter();
        if (!shelter.supplies) {
          try {
            controller.enqueue(CreateShelterSchema.parse(shelter));
          } catch (error) {
            this.counter.incrementFailure();
            logger.error(error, shelter);
          }
          return;
        }

        const missingSupplyNames = new Set<string>();

        const toCreate: Prisma.ShelterSupplyCreateNestedManyWithoutShelterInput['create'] =
          [];

        for (const supplyName of missingSupplyNames.values()) {
          for (const [categoryName, values] of Object.entries(
            shelterSupliesByCategory,
          )) {
            const indexFound = values.findIndex(
              (item) => item.toLowerCase() === supplyName.toLowerCase(),
            );
            if (indexFound !== -1) {
              toCreate.push({
                supplyId: suppliesAvailable.get(supplyName.toLowerCase())!,
                supply: {
                  connect: {
                    id: suppliesAvailable.get(supplyName.toLowerCase())!,
                    name: supplyName,
                  },
                  connectOrCreate: {
                    where: {
                      id: suppliesAvailable.get(supplyName.toLowerCase()),
                    },
                    create: {
                      name: supplyName,
                      supplyCategory: {
                        connect: {
                          name: categoryName,
                          id: categoriesAvailable.get(
                            categoryName.toLowerCase(),
                          ),
                        },
                      },
                    },
                  },
                },
              });
            }
          }
        }
        shelter.shelterSupplies = {
          create: toCreate,
        };

        if (shelter.latitude) {
          shelter.latitude = Number.parseFloat(`${shelter.latitude}`);
        }
        if (shelter.longitude) {
          shelter.longitude = Number.parseFloat(`${shelter.longitude}`);
        }

        Object.keys(shelter).forEach((key) => {
          if (
            typeof shelter[key] === 'string' &&
            shelter[key].trim().length === 0
          ) {
            shelter[key] = null;
          }
        });

        await CreateShelterSchema.parseAsync(shelter)
          .then((s) => controller.enqueue(s))
          .catch((e) => {
            this.counter.incrementFailure();
            logger.error(e.message, shelter);
          });
      },
    });
  }
}

async function detectSupplyCategoryUsingAI(
  input: unknown,
  categoriesAvailable: string[],
): Promise<Record<string, string[]>> {
  if (typeof input !== 'string') {
    logger.warn(`Input inesperado recebido: ${input}`);
    return {};
  }
  const apiKey = process.env.GEMINI_API_KEY;

  if (!apiKey) {
    const res = require(
      path.resolve(__dirname, '..', '..', 'promp_response.json'),
    );
    return res;
  }
  const genAI = new GoogleGenerativeAI(apiKey);

  const model = genAI.getGenerativeModel({
    model: 'gemini-1.5-pro-latest',
  });

  const generationConfig = {
    temperature: 1,
    topP: 0.95,
    topK: 64,
    maxOutputTokens: 8192,
    responseMimeType: 'application/json',
  };

  const safetySettings = [
    {
      category: HarmCategory.HARM_CATEGORY_HARASSMENT,
      threshold: HarmBlockThreshold.BLOCK_ONLY_HIGH,
    },
    {
      category: HarmCategory.HARM_CATEGORY_HATE_SPEECH,
      threshold: HarmBlockThreshold.BLOCK_ONLY_HIGH,
    },
    {
      category: HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT,
      threshold: HarmBlockThreshold.BLOCK_ONLY_HIGH,
    },
    {
      category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT,
      threshold: HarmBlockThreshold.BLOCK_ONLY_HIGH,
    },
  ];

  const chatSession = model.startChat({
    generationConfig,
    safetySettings,
    history: [
      {
        role: 'user',
        parts: [
          {
            text: `Voc√™ √© um classificador de itens donativos para trag√©dias ambientais.\nCategorize os INPUT em uma das seguintes categorias: ${categoriesAvailable.join(', ')}. Retorne um JSON com a seguitne assinatura: Record<nomeCategoria, produtos[]>. Cada produto pode ter apenas uma categoria.`,
          },
          {
            text: 'Lanternas, Roupas para crian√ßas, Comidas N√£o Perec√≠veis, Pratos, Len√ß√≥is, Cadeiras (tipo de praia), Absorventes higi√™nicos, Kits de primeiros socorros, F√≥rmula infantil, Colch√µes, Caixas de papel√£o, Lixeiras, Carne Gado, Gaze, Term√¥metro, √Ålcool, Repelente, Massa, Descarpack Caixa, Mamadeira, Soro, Chupeta/bico, Len√ßos umedecidos, Sabonetes, Escova de dentes, Shampoo e Condicionador, Plus Size/GG, P√°s, Desodorante, Volunt√°rio - Noite, Shampoo, Veterin√°rios, Luvas, Rem√©dios b√°sicos, Roupas √≠ntimas, Medicamentos prescritos, Turnos de manh√£, Turnos de noite, Fraldas, Ventilador, Roupa √çntima (adulto) Feminina E Masculina, Luvas De Limpeza, Toalhas de banho, Ventiladores, Vassouras, Sacos de lixo, Pomadas, Feij√£o, T√™nis, Chinelos, Ol√©o, Roupas para frio, Leite em p√≥, Gelo, Azitotromicina, Papel higi√™nico, Sacolinhas plasticas para kits, G√°s, Ra√ß√£o para animais, Antibi√≥tico, Suco de caixinha, Jornal (para xixi e coco), Caixa de areia (gato), Volunt√°rios Para Animais (n√£o Necessariamente Veterin√°rio/a), Alimentos Diets, Luz de Emerg√™ncia, Lanterna, Lonas, √Ågua, Travesseiros/almofada, Chinelos masculinos, √Ågua pot√°vel, Itens de limpeza, Roupa √çntima Infantil, Roupas Masculinas G E Gg, Azeite, Roupa √≠ntima masculina e feminina, Roupas femininas G/GG, Roupa plus size, Arroz, Roupas grandes, Esponjas De Lou√ßa, Roupas para adultos, Sapato Infantil, Turno da madrugada, Sab√£o em p√≥, Pasta de dente, Caminh√£o Pipa, Fralda RN, Produtos de desinfec√ß√£o (cloro, √°lcool), Copos, Volunt√°rio - Madrugada, Roupas Femininas, Roupa Masculina, Roupas Pluz Size, Rolo Lona Preta 40m x 6m (mais grossa), Lona, Fraldas Geriatricas, Cordas, Casinha para cachorro, Lar Tempor√°rio Para Animais, Ponto De Resgate, Caixas de transporte para pets, √Ålcool em gel, Coleiras, Mascara, Cesta B√°sica, Roupa Masculina Gg, Pat√™ Para Cachorro, Roupa Infantil Menino, Fita Durex larga, Papagaio - Urinar, Papagaio, Cama Geriatria, Escova de cabelo, Toalhas, Cadeira De Rodas, Leitos para animais, SACOS DE AREIA, Caixa De Transporte, Areia de gato, Macarr√£o, Desinfetante, Caf√©, Pente/Escova de cabelo, Condicionador, Gilete, Alimentos para consumo r√°pido (Leite, bolacha, suco, etc), Colher Descart√°vel, Lanches, Tapete higi√™nico, Medicamentos veterin√°rios, Cobertores, P√£o, P√£o De Sandu√≠che, Sucos, Papel toalha, TELAS / CHIQUEIROS, Banana, Cebola, Frutas, Alface, Tomate, Luva G, Jogo de cartas, baralho, dama e domin√≥, etc, Seringa De Insulina, Seringa 3 E 5ml Com Agulha 70x30, ROUPAS INTIMAS - CUECAS - G, Bermuda Masculina, Hipogl√≥s, Talheres, Tapetes higi√™nicos, Guardanapo de papel, M√©dicos, Psic√≥logos, Papel√£o, Volunt√°rio - Manh√£, Roupa Infantil 8-10 Anos, Roupa Masculina Adulta, Assistentes Sociais, Leite, Fralda P, Embalagem descart√°vel para as marmitas, Sabonete infantil, Turnos de tarde, Antipulgas - Animais Pequeno Porte, Higiene Pessoal, Produtos de higiene, Garfo e faca, Pano de ch√£o, Pano de prato, Potes (marmitex), Pilha Aa, Guarda-sol, Pomada para assadura, Fraldas Adultas, Meias, Luvas descart√°veis, Baldes, Travesseiro, Talher Descart√°vel, Detergente, √Ågua Sanit√°ria, Chimia, Sabonete L√≠quido, Luva de Latex Descart√°vel, Pano De Ch√£o / Saco Alvejado, Probi√≥tico Para Animais, Escova Para Limpar Mamadeira, Molho de tomate, A√ß√∫car, Volunt√°rio - Tarde, Roupas leves, Toucas, Luvas Descart√°veis, Len√ßo umedecido, Lumin√°rias com pedestal para √°rea sa√∫de 1m altura pelo menos, Ganchos para montar varal, Freezer para armazenar comida, M√°quina de lavar roupa, Luvas para limpeza, Bermudas, Assento para vaso sanit√°rio, Cal√ßado masculino, Jornal/Papel√£o, Frios, Carne Frango, Farinha, Travesseiros, Fronhas, El√°stico Para Cabelo, Roupas plus size feminina, Malas de Viagem, Banheiro Qu√≠mico (apenas Chuveiro), Bon√©s, Produtos de limpeza, Pano De Limpeza, Bolachinha, Vassouras e rodos, Fralda XG e XXG, Creme de pentear, Fita adesiva (durex), Roupa √≠ntima feminina, Ra√ß√£o gato, Capas de chuva, Toalha de Banho, Guarda-chuva, Farinha de trigo, Gatorade/Isot√¥nico, Latas de lixo, Massinha De Modelar, Roupas plus size masculino, Saco De Lixo De V√°rios Tamanhos, Baralhos, Erva Mate, Touca Descart√°vel Sal, Polenta, Cal√ßados, Itens de higienLanternas, Roupas para crian√ßas, Comidas N√£o Perec√≠veis, Pratos, Len√ß√≥is, Cadeiras (tipo de praia), Absorventes higi√™nicos, Kits de primeiros socorros, F√≥rmula infantil, Colch√µes, Caixas de papel√£o, Lixeiras, Carne Gado, Gaze, Term√¥metro, √Ålcool, Repelente, Massa, Descarpack Caixa, Mamadeira, Soro, Chupeta/bico, Len√ßos umedecidos, Sabonetes, Escova de dentes, Shampoo e Condicionador, Plus Size/GG, P√°s, Desodorante, Volunt√°rio - Noite, Shampoo, Veterin√°rios, Luvas, Rem√©dios b√°sicos, Roupas √≠ntimas, Medicamentos prescritos, Turnos de manh√£, Turnos de noite, Fraldas, Ventilador, Roupa √çntima (adulto) Feminina E Masculina, Luvas De Limpeza, Toalhas de banho, Ventiladores, Vassouras, Sacos de lixo, Pomadas, Feij√£o, T√™nis, Chinelos, Ol√©o, Roupas para frio, Leite em p√≥, Gelo, Azitotromicina, Papel higi√™nico, Sacolinhas plasticas para kits, G√°s, Ra√ß√£o para animais, Antibi√≥tico, Suco de caixinha, Jornal (para xixi e coco), Caixa de areia (gato), Volunt√°rios Para Animais (n√£o Necessariamente Veterin√°rio/a), Alimentos Diets, Luz de Emerg√™ncia, Lanterna, Lonas, √Ågua, Travesseiros/almofada, Chinelos masculinos, √Ågua pot√°vel, Itens de limpeza, Roupa √çntima Infantil, Roupas Masculinas G E Gg, Azeite, Roupa √≠ntima masculina e feminina, Roupas femininas G/GG, Roupa plus size, Arroz, Roupas grandes, Esponjas De Lou√ßa, Roupas para adultos, Sapato Infantil, Turno da madrugada, Sab√£o em p√≥, Pasta de dente, Caminh√£o Pipa, Fralda RN, Produtos de desinfec√ß√£o (cloro, √°lcool), Copos, Volunt√°rio - Madrugada, Roupas Femininas, Roupa Masculina, Roupas Pluz Size, Rolo Lona Preta 40m x 6m (mais grossa), Lona, Fraldas Geriatricas, Cordas, Casinha para cachorro, Lar Tempor√°rio Para Animais, Ponto De Resgate, Caixas de transporte para pets, √Ålcool em gel, Coleiras, Mascara, Cesta B√°sica, Roupa Masculina Gg, Pat√™ Para Cachorro, Roupa Infantil Menino, Fita Durex larga, Papagaio - Urinar, Papagaio, Cama Geriatria, Escova de cabelo, Toalhas, Cadeira De Rodas, Leitos para animais, SACOS DE AREIA, Caixa De Transporte, Areia de gato, Macarr√£o, Desinfetante, Caf√©, Pente/Escova de cabelo, Condicionador, Gilete, Alimentos para consumo r√°pido (Leite, bolacha, suco, etc), Colher Descart√°vel, Lanches, Tapete higi√™nico, Medicamentos veterin√°rios, Cobertores, P√£o, P√£o De Sandu√≠che, Sucos, Papel toalha, TELAS / CHIQUEIROS, Banana, Cebola, Frutas, Alface, Tomate, Luva G, Jogo de cartas, baralho, dama e domin√≥, etc, Seringa De Insulina, Seringa 3 E 5ml Com Agulha 70x30, ROUPAS INTIMAS - CUECAS - G, Bermuda Masculina, Hipogl√≥s, Talheres, Tapetes higi√™nicos, Guardanapo de papel, M√©dicos, Psic√≥logos, Papel√£o, Volunt√°rio - Manh√£, Roupa Infantil 8-10 Anos, Roupa Masculina Adulta, Assistentes Sociais, Leite, Fralda P, Embalagem descart√°vel para as marmitas, Sabonete infantil, Turnos de tarde, Antipulgas - Animais Pequeno Porte, Higiene Pessoal, Produtos de higiene, Garfo e faca, Pano de ch√£o, Pano de prato, Potes (marmitex), Pilha Aa, Guarda-sol, Pomada para assadura, Fraldas Adultas, Meias, Luvas descart√°veis, Baldes, Travesseiro, Talher Descart√°vel, Detergente, √Ågua Sanit√°ria, Chimia, Sabonete L√≠quido, Luva de Latex Descart√°vel, Pano De Ch√£o / Saco Alvejado, Probi√≥tico Para Animais, Escova Para Limpar Mamadeira, Molho de tomate, A√ß√∫car, Volunt√°rio - Tarde, Roupas leves, Toucas, Luvas Descart√°veis, Len√ßo umedecido, Lumin√°rias com pedestal para √°rea sa√∫de 1m altura pelo menos, Ganchos para montar varal, Freezer para armazenar comida, M√°quina de lavar roupa, Luvas para limpeza, Bermudas, Assento para vaso sanit√°rio, Cal√ßado masculino, Jornal/Papel√£o, Frios, Carne Frango, Farinha, Travesseiros, Fronhas, El√°stico Para Cabelo, Roupas plus size feminina, Malas de Viagem, Banheiro Qu√≠mico (apenas Chuveiro), Bon√©s, Produtos de limpeza, Pano De Limpeza, Bolachinha, Vassouras e rodos, Fralda XG e XXG, Creme de pentear, Fita adesiva (durex), Roupa √≠ntima feminina, Ra√ß√£o gato, Capas de chuva, Toalha de Banho, Guarda-chuva, Farinha de trigo, Gatorade/Isot√¥nico, Latas de lixo, Massinha De Modelar, Roupas plus size masculino, Saco De Lixo De V√°rios Tamanhos, Baralhos, Erva Mate, Touca Descart√°vel,  Sal, Polenta, Cal√ßados, Itens de higiena pessoal, Achocolatado pronto, Roupas de Camas, Sacolas Para Montar Kits, Sacolas ou sacos pl√°sticos, T√©cnico De Enfermagem, Enfermeirosa pessoal, Achocolatado pronto, Roupas de Camas, Sacolas Para Montar Kits, Sacolas ou sacos pl√°sticos, T√©cnico De Enfermagem, Enfermeiros',
          },
        ],
      },
      {
        role: 'model',
        parts: [
          {
            text: '{"medicamentos": ["Kits de primeiros socorros", "Gaze", "Term√¥metro", "√Ålcool", "Repelente", "Soro", "Rem√©dios b√°sicos", "Medicamentos prescritos", "Pomadas", "Azitotromicina", "Antibi√≥tico", "√Ålcool em gel", "Pomada para assadura", "Desinfetante", "Medicamentos veterin√°rios", "Seringa De Insulina", "Seringa 3 E 5ml Com Agulha 70x30", "Hipogl√≥s", "Antipulgas - Animais Pequeno Porte", "Probi√≥tico Para Animais"], "cuidados com animais": ["Ra√ß√£o para animais", "Caixa de areia (gato)", "Volunt√°rios Para Animais (n√£o Necessariamente Veterin√°rio/a)", "Coleiras", "Pat√™ Para Cachorro", "Casinha para cachorro", "Lar Tempor√°rio Para Animais", "Caixas de transporte para pets", "Leitos para animais", "SACOS DE AREIA", "Caixa De Transporte", "Areia de gato", "TELAS / CHIQUEIROS", "Tapetes higi√™nicos", "Ra√ß√£o gato"], "especialistas e profissionais": ["Veterin√°rios", "Volunt√°rio - Noite", "Turnos de manh√£", "Turnos de noite", "Turno da madrugada", "Volunt√°rio - Madrugada", "Volunt√°rio - Manh√£", "M√©dicos", "Psic√≥logos", "Assistentes Sociais", "Turnos de tarde", "Volunt√°rio - Tarde", "T√©cnico De Enfermagem", "Enfermeiros"], "acomoda√ß√µes e descanso": ["Len√ß√≥is", "Cadeiras (tipo de praia)", "Colch√µes", "Lonas", "Travesseiros/almofada", "Rolo Lona Preta 40m x 6m (mais grossa)", "Lona", "Cordas", "Cama Geriatria", "Cobertores", "Guarda-sol", "Travesseiro", "Lumin√°rias com pedestal para √°rea sa√∫de 1m altura pelo menos", "Ganchos para montar varal", "Bermudas", "Capas de chuva", "Guarda-chuva", "Roupas de Camas"], "equipamentos de emerg√™ncia": ["Lanternas", "Luz de Emerg√™ncia", "Lanterna", "Ventilador", "Ventiladores", "Caminh√£o Pipa", "Fita Durex larga", "Cadeira De Rodas", "Pilha Aa", "Baldes"], "voluntariado": ["Volunt√°rio - Noite", "Turnos de manh√£", "Turnos de noite", "Turno da madrugada", "Volunt√°rio - Madrugada", "Volunt√°rio - Manh√£", "Turnos de tarde", "Volunt√°rio - Tarde"], "itens descart√°veis": ["Pratos", "Descarpack Caixa", "Mamadeira", "Chupeta/bico", "Fraldas", "Sacos de lixo", "Sacolinhas plasticas para kits", "Jornal (para xixi e coco)", "Copos", "Papagaio - Urinar", "Colher Descart√°vel", "Papel toalha", "Guardanapo de papel", "Embalagem descart√°vel para as marmitas", "Garfo e faca", "Potes (marmitex)", "Talher Descart√°vel", "Luva de Latex Descart√°vel", "Escova Para Limpar Mamadeira", "Toucas", "Luvas Descart√°veis", "Len√ßo umedecido", "Assento para vaso sanit√°rio", "Jornal/Papel√£o", "Touca Descart√°vel", "Sacolas Para Montar Kits", "Sacolas ou sacos pl√°sticos"], "higiene pessoal": ["Absorventes higi√™nicos", "Len√ßos umedecidos", "Sabonetes", "Escova de dentes", "Shampoo e Condicionador", "P√°s", "Desodorante", "Shampoo", "Roupas √≠ntimas", "Roupa √çntima (adulto) Feminina E Masculina", "Toalhas de banho", "Papel higi√™nico", "Roupa √çntima Infantil", "Sab√£o em p√≥", "Pasta de dente", "Produtos de desinfec√ß√£o (cloro, √°lcool)", "Escova de cabelo", "Toalhas", "Pente/Escova de cabelo", "Condicionador", "Gilete", "Tapete higi√™nico", "Sabonete infantil", "Higiene Pessoal", "Produtos de higiene", "Pano de ch√£o", "Pano de prato", "Detergente", "√Ågua Sanit√°ria", "Chimia", "Sabonete L√≠quido", "Pano De Ch√£o / Saco Alvejado", "Esponjas De Lou√ßa", "Len√ßo umedecido", "Luvas para limpeza", "Produtos de limpeza", "Pano De Limpeza", "Creme de pentear", "Toalha de Banho", "Itens de higiena pessoal"], "alimentos e √°gua": ["Roupas para crian√ßas", "Comidas N√£o Perec√≠veis", "F√≥rmula infantil", "Carne Gado", "Massa", "Feij√£o", "Ol√©o", "Leite em p√≥", "Gelo", "Suco de caixinha", "Alimentos Diets", "√Ågua", "Chinelos masculinos", "√Ågua pot√°vel", "Azeite", "Arroz", "Macarr√£o", "Caf√©", "Alimentos para consumo r√°pido (Leite, bolacha, suco, etc)", "Lanches", "P√£o", "P√£o De Sandu√≠che", "Sucos", "Banana", "Cebola", "Frutas", "Alface", "Tomate", "Leite", "Molho de tomate", "A√ß√∫car", "Frios", "Carne Frango", "Farinha", "Bolachinha", "Farinha de trigo", "Gatorade/Isot√¥nico", "Massinha De Modelar", "Sal", "Polenta", "Achocolatado pronto"], "material de limpeza": ["Caixas de papel√£o", "Lixeiras", "Luvas De Limpeza", "Vassouras", "Sacos de lixo", "Itens de limpeza", "Produtos de desinfec√ß√£o (cloro, √°lcool)", "Desinfetante", "Vassouras e rodos", "Latas de lixo", "Saco De Lixo De V√°rios Tamanhos"], "vestu√°rio": ["Roupas para crian√ßas", "Plus Size/GG", "Luvas", "Roupas para frio", "Roupas Masculinas G E Gg", "Roupa √≠ntima masculina e feminina", "Roupas femininas G/GG", "Roupa plus size", "Roupas grandes", "Roupas para adultos", "Sapato Infantil", "Roupas Femininas", "Roupa Masculina", "Roupas Pluz Size", "Fraldas Geriatricas", "Mascara", "Roupa Masculina Gg", "Roupa Infantil Menino", "Roupas INTIMAS - CUECAS - G", "Bermuda Masculina", "Roupa Infantil 8-10 Anos", "Roupa Masculina Adulta", "Fralda P", "Fraldas Adultas", "Meias", "Roupas leves", "Bermudas", "Cal√ßado masculino", "Roupas plus size feminina", "Bon√©s", "Roupa √≠ntima feminina", "Fralda XG e XXG", "Roupas plus size masculino", "Cal√ßados", "Roupa √çntima Infantil"], "ve√≠culos de resgate e transporte": ["Caminh√£o Pipa"], "eletrodom√©sticos e eletr√¥nicos": ["Ventilador", "Ventiladores", "Luz de Emerg√™ncia", "Lanterna", "Freezer para armazenar comida", "M√°quina de lavar roupa", "Lumin√°rias com pedestal para √°rea sa√∫de 1m altura pelo menos"], "mob√≠lias": ["Cadeiras (tipo de praia)", "Colch√µes", "Cama Geriatria"], "jogos e passatempo": ["Jogo de cartas, baralho, dama e domin√≥, etc", "Baralhos"], "cosm√©ticos": ["Shampoo e Condicionador", "P√°s", "Desodorante", "Shampoo", "Creme de pentear"]}\n',
          },
        ],
      },
    ],
  });
  let promptOutput: Record<string, string[]> = {};
  try {
    const result = await chatSession.sendMessage(input);
    const response = result.response.text();
    promptOutput = JSON.parse(response);
  } catch (error) {
    logger.error(error);
  }

  return promptOutput;
}

class AtomicCounter {
  private _successCount = 0;
  private _totalCount = 0;
  private _failureCount = 0;

  public get totalCount() {
    return this._totalCount;
  }
  public get successCount() {
    return this._successCount;
  }
  public get failureCount() {
    return this._failureCount;
  }

  incrementSuccess() {
    this._successCount += 1;
  }

  increment() {
    this._totalCount += 1;
  }

  incrementFailure() {
    this._failureCount += 1;
  }
}

/**
 * ```js
 *  // Pode ser uma stream de arquivo
 *  const fileSourceStream = createReadStream(__dirname + '/planilha_porto_alegre - comida.csv');
 *  // Ou uma url de um arquivo CSV
 *  const csvUrl = 'https://docs.google.com/spreadsheets/d/18hY52i65lIdLE2UsugjnKdnE_ubrBCI6nCR0XQurSBk/gviz/tq?tqx=out:csv&sheet=planilha_porto_alegre';
 * // passar os headers
 *  parseCsv({fileStream: fileSourceStream, csvUrl,headers:{ nameField:'nome' ,addressField:'endereco',latitudeField:'lat'}})
 * ```
 * 

 */
export async function shelterToCsv({
  headers,
  csvUrl,
  fileStream,
}: ParseCsvArgs<ShelterColumHeader>) {
  const validInput = (csvUrl && URL.canParse(csvUrl)) || fileStream != null;
  const atomicCounter = new AtomicCounter();
  if (!validInput) {
    logger.warn('Um dos campos `csvUrl` ou `fileStream` √© obrigat√≥rio');
    throw new Error('Um dos campos `csvUrl` ou `fileStream` √© obrigat√≥rio');
  }

  const shelters: ShelterInput[] = [];

  let csvSourceStream: Readable;
  if (csvUrl) {
    csvSourceStream = responseToReadable(await fetch(csvUrl));
  } else {
    csvSourceStream = fileStream!;
  }

  const prismaService = new PrismaService();

  const [categories, supplies] = await prismaService.$transaction([
    prismaService.supplyCategory.findMany({}),
    prismaService.supply.findMany({ distinct: ['name'] }),
  ]);

  const missingShelterSupplies = new Set<string>();

  const suppliesAvailable = supplies.reduce((acc, item) => {
    acc.set(item.name.trim().toLowerCase(), item.id);
    return acc;
  }, new Map<string, string>());

  const categoriesAvailable = categories.reduce((acc, item) => {
    acc.set(item.name.trim().toLowerCase(), item.id);
    return acc;
  }, new Map<string, string>());

  let shelterSupliesByCategory: Record<string, string[]> = {};
  await Readable.toWeb(csvSourceStream)
    .pipeThrough(Transform.toWeb(csvParser))
    .pipeThrough(new CsvToShelterTransformStream(headers))
    .pipeThrough(
      new TransformStream({
        transform(shelter, controller) {
          atomicCounter.increment();
          if (shelter?.supplies?.length) {
            for (const supply of shelter.supplies) {
              if (suppliesAvailable.has(supply)) {
                continue;
              }
              if (!missingShelterSupplies.has(supply)) {
                missingShelterSupplies.add(supply);
              }
            }
          }
          shelters.push(shelter);
          controller.enqueue(shelter);
        },
      }),
    )
    .pipeTo(
      new WritableStream({
        async close() {
          const missingSheltersString = Array.from(missingShelterSupplies).join(
            ', ',
          );
          shelterSupliesByCategory = await detectSupplyCategoryUsingAI(
            missingSheltersString,
            Array.from(categoriesAvailable.keys()),
          );
        },
      }),
    );

  await Readable.toWeb(Readable.from(shelters))
    .pipeThrough(
      new ShelterEnhancedStreamTransformer({
        categoriesAvailable,
        shelterSupliesByCategory,
        suppliesAvailable,
        counter: atomicCounter,
      }),
    )

    .pipeTo(
      new WritableStream({
        async write(
          shelter: ReturnType<(typeof CreateShelterSchema)['parse']>,
        ) {
          await prismaService.shelter
            .create({ data: shelter, select: { name: true, id: true } })
            .then((d) => {
              atomicCounter.incrementSuccess();
              logger.debug(d);
            })
            .catch((e: Error) => {
              atomicCounter.incrementFailure();
              if (e instanceof PrismaClientKnownRequestError) {
                logger.error(translatePrismaError(e));
              } else {
                logger.error(e);
              }
            });
        },
        close() {
          logger.log(
            `${atomicCounter.successCount} de ${atomicCounter.totalCount} processados. ${atomicCounter.failureCount} com erro.`,
          );
        },
      }),
    );

  return {
    successCount: atomicCounter.successCount,
    totalCount: atomicCounter.totalCount,
    failureCount: atomicCounter.failureCount,
  };
}
